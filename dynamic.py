import csv
import os
import json
import sys
import pickle

################################### From README ############################
#The function featurefoo extracts the feature from a single file
#The features considered in feature extraction Phase were from Network,
#Behavior->summary, Classes of API's, Total API's
#which gave me total 296 feature columns 
#Then I feature engineered the features by removing 
#1>Missing value columns
#2>one of Correlated feature columns 
#3>Single Unique value columns
#4>Zero Importance , Low Importance Features  
#Which reduced feature size to 35
#After reducing the features are put in a dictionary so that the program 
#does not take a long time to get the features out from the files.
#Otherwise in feature reduction could take a lot of time if done while 
#prediction.
############################################################################


def featurefoo(address): 
    processdict = {'LdrLoadDll': 'system', 'LdrGetDllHandle': 'system', 'LdrGetProcedureAddress': 'system', 'NtClose': 'system', 'GetSystemInfo': 'system', 'NtQuerySystemInformation': 'system', 'GlobalMemoryStatusEx': 'system', 'NtDuplicateObject': 'system', 'LdrUnloadDll': 'system', 'GetNativeSystemInfo': 'system', 'SetErrorMode': 'system', 'IsDebuggerPresent': 'system', 'SetWindowsHookExW': 'system', 'GetKeyState': 'system', 'SetWindowsHookExA': 'system', 'SendNotifyMessageW': 'system', 'UnhookWindowsHookEx': 'system', 'RtlDecompressBuffer': 'system', 'GlobalMemoryStatus': 'system', 'OutputDebugStringA': 'system', 'SendNotifyMessageA': 'system', 'LookupPrivilegeValueW': 'system', 'GetAsyncKeyState': 'system', 'GetKeyboardState': 'system', 'NtLoadDriver': 'system', 'ExitWindowsEx': 'system', 'NtAllocateVirtualMemory': 'process', 'NtProtectVirtualMemory': 'process', 'NtFreeVirtualMemory': 'process', 'NtCreateThreadEx': 'process', 'NtResumeThread': 'process', 'NtTerminateProcess': 'process', 'NtUnmapViewOfSection': 'process', 'NtCreateSection': 'process', 'NtMapViewOfSection': 'process', 'CreateThread': 'process', 'CreateToolhelp32Snapshot': 'process', 'Module32FirstW': 'process', 'Module32NextW': 'process', 'Thread32First': 'process', 'Thread32Next': 'process', 'NtOpenThread': 'process', 'NtSuspendThread': 'process', 'NtOpenSection': 'process', 'ReadProcessMemory': 'process', 'NtOpenProcess': 'process', 'CreateProcessInternalW': 'process', 'ShellExecuteExW': 'process', 'Process32FirstW': 'process', 'Process32NextW': 'process', 'NtGetContextThread': 'process', 'NtTerminateThread': 'process', 'CreateRemoteThread': 'process', 'CreateJobObjectW': 'process', 'NtSetContextThread': 'process', 'WriteProcessMemory': 'process', 'CreateRemoteThreadEx': 'process', 'NtWriteVirtualMemory': 'process', 'SetInformationJobObject': 'process', 'AssignProcessToJobObject': 'process', 'system': 'process', 'NtQueueApcThread': 'process', 'NtReadVirtualMemory': 'process', 'RtlCreateUserThread': 'process', 'NtOpenKeyEx': 'registry', 'NtQueryValueKey': 'registry', 'RegOpenKeyExA': 'registry', 'RegQueryValueExA': 'registry', 'RegCloseKey': 'registry', 'RegCreateKeyExA': 'registry', 'RegQueryValueExW': 'registry', 'RegSetValueExW': 'registry', 'NtOpenKey': 'registry', 'NtEnumerateValueKey': 'registry', 'RegOpenKeyExW': 'registry', 'RegSetValueExA': 'registry', 'RegEnumKeyExA': 'registry', 'RegCreateKeyExW': 'registry', 'NtQueryKey': 'registry', 'RegDeleteKeyW': 'registry', 'RegDeleteKeyA': 'registry', 'RegQueryInfoKeyW': 'registry', 'RegEnumValueA': 'registry', 'NtEnumerateKey': 'registry', 'RegDeleteValueW': 'registry', 'RegEnumKeyExW': 'registry', 'RegEnumValueW': 'registry', 'NtCreateKey': 'registry', 'RegEnumKeyW': 'registry', 'RegQueryInfoKeyA': 'registry', 'RegDeleteValueA': 'registry', 'NtSetValueKey': 'registry', 'NtDeleteValueKey': 'registry', 'NtQueryMultipleValueKey': 'registry', 'NtDeleteKey': 'registry', 'NtOpenDirectoryObject': 'file', 'GetSystemDirectoryW': 'file', 'NtOpenFile': 'file', 'NtQueryInformationFile': 'file', 'NtCreateFile': 'file', 'NtDeviceIoControlFile': 'file', 'DeviceIoControl': 'file', 'GetFileAttributesW': 'file', 'FindFirstFileExW': 'file', 'GetFileType': 'file', 'NtQueryAttributesFile': 'file', 'SetFilePointer': 'file', 'NtReadFile': 'file', 'CopyFileExW': 'file', 'GetTempPathW': 'file', 'DeleteFileW': 'file', 'NtWriteFile': 'file', 'NtSetInformationFile': 'file', 'SearchPathW': 'file', 'GetSystemWindowsDirectoryW': 'file', 'SetFileAttributesW': 'file', 'SetFileTime': 'file', 'GetFileSize': 'file', 'GetShortPathNameW': 'file', 'GetSystemDirectoryA': 'file', 'CopyFileA': 'file', 'CreateDirectoryW': 'file', 'GetFileSizeEx': 'file', 'GetFileInformationByHandleEx': 'file', 'GetFileAttributesExW': 'file', 'GetVolumeNameForVolumeMountPointW': 'file', 'GetVolumePathNamesForVolumeNameW': 'file', 'NtQueryDirectoryFile': 'file', 'SetEndOfFile': 'file', 'CreateDirectoryExW': 'file', 'GetVolumePathNameW': 'file', 'NtQueryFullAttributesFile': 'file', 'SetFilePointerEx': 'file', 'CopyFileW': 'file', 'RemoveDirectoryA': 'file', 'MoveFileWithProgressW': 'file', 'SetFileInformationByHandle': 'file', 'RemoveDirectoryW': 'file', 'GetFileInformationByHandle': 'file', 'GetSystemWindowsDirectoryA': 'file', 'FindFirstFileExA': 'file', 'GetSystemTimeAsFileTime': 'synchronisation', 'NtCreateMutant': 'synchronisation', 'NtDelayExecution': 'synchronisation', 'NtOpenMutant': 'synchronisation', 'timeGetTime': 'synchronisation', 'SHGetFolderPathW': 'misc', 'CreateActCtxW': 'misc', 'EnumWindows': 'misc', 'GetUserNameA': 'misc', 'GetComputerNameA': 'misc', 'UuidCreate': 'misc', 'GetUserNameW': 'misc', 'GetSystemMetrics': 'misc', 'GetFileVersionInfoW': 'misc', 'GetCursorPos': 'misc', 'SetStdHandle': 'misc', 'GetFileVersionInfoSizeW': 'misc', 'GetComputerNameW': 'misc', 'WriteConsoleW': 'misc', 'SHGetSpecialFolderLocation': 'misc', 'GetTimeZoneInformation': 'misc', 'GetDiskFreeSpaceExW': 'misc', 'GetDiskFreeSpaceW': 'misc', 'WriteConsoleA': 'misc', 'LookupAccountSidW': 'misc', 'GetUserNameExW': 'misc', 'IWbemServices_ExecMethod': 'misc', 'ReadCabinetState': 'misc', 'IWbemServices_ExecQuery': 'misc', 'GetFileVersionInfoSizeExW': 'misc', 'GetFileVersionInfoExW': 'misc', 'RegisterHotKey': 'misc', 'TaskDialog': 'misc', 'GetUserNameExA': 'misc'}
    dictio = {'duration': 0, 'udp': 0, 'tcp': 0, 'http': 0, 'hosts': 0, 'WriteConsoleW': 0, 'GetFileType': 0, 'NtQueryDirectoryFile': 0, 'GetSystemWindowsDirectoryW': 0, '__exception__': 0, 'GetFileAttributesW': 0, 'FindFirstFileExW': 0, 'NtClose': 0, 'NtOpenKey': 0, 'NtQueryValueKey': 0, 'LdrGetDllHandle': 0, 'LdrGetProcedureAddress': 0, 'LdrLoadDll': 0, 'NtCreateFile': 0, 'NtAllocateVirtualMemory': 0, 'NtReadFile': 0, 'RegOpenKeyExW': 0, 'RegQueryValueExW': 0, 'NtFreeVirtualMemory': 0, 'RegOpenKeyExA': 0, 'RegCloseKey': 0, 'RegQueryValueExA': 0, 'NtWriteFile': 0, 'system': 0, 'process': 0, 'registry': 0, 'file': 0, 'synchronisation': 0, 'misc': 0, 'dll_loaded': 0}
    with open(address, "rb") as f:

            dictio = {'duration': 0, 'udp': 0, 'tcp': 0, 'http': 0, 'hosts': 0, 'WriteConsoleW': 0, 'GetFileType': 0, 'NtQueryDirectoryFile': 0, 'GetSystemWindowsDirectoryW': 0, '__exception__': 0, 'GetFileAttributesW': 0, 'FindFirstFileExW': 0, 'NtClose': 0, 'NtOpenKey': 0, 'NtQueryValueKey': 0, 'LdrGetDllHandle': 0, 'LdrGetProcedureAddress': 0, 'LdrLoadDll': 0, 'NtCreateFile': 0, 'NtAllocateVirtualMemory': 0, 'NtReadFile': 0, 'RegOpenKeyExW': 0, 'RegQueryValueExW': 0, 'NtFreeVirtualMemory': 0, 'RegOpenKeyExA': 0, 'RegCloseKey': 0, 'RegQueryValueExA': 0, 'NtWriteFile': 0, 'system': 0, 'process': 0, 'registry': 0, 'file': 0, 'synchronisation': 0, 'misc': 0, 'dll_loaded': 0}
            data = json.load(f)
            if 'info' in data:
                if 'duration' in data['info']:
                    dictio['duration'] = data['info']['duration']
            for val in data['network']:
                if(val in dictio.keys()):
                    dictio[val] = len(data['network'][val])

            if 'behavior' in data:
                if 'summary' in data['behavior']:
                    for val in data['behavior']['summary']:
                        if(val in dictio.keys()):
                            dictio[val] = len(data['behavior']['summary'][val])
           
                if 'apistats' in data['behavior']:
                    for val in data['behavior']['apistats']:
                        for key,value in data['behavior']['apistats'][val].items():
                            if(key in dictio.keys()):
                                dictio[key] = value
                            if(key in processdict.keys()):
                                dictio[processdict[key]] += value
            lis = list(dictio.values())
    return lis



def finaldynamicfoo(direc):
    filename = "Dynamicmodel"
    model =  pickle.load(open(filename, 'rb'))
    finalist = []
    topics = ['File_Hash', 'Predicted Label']
    for files in os.listdir(direc):
        
        lis= []
        
        X = featurefoo(os.path.join(direc,files))
        y = model.predict([X])

        lis.append(files) 
        if(y == 1):
            y = 'M'
        else:
            y = 'B'
        lis.extend(y)
        
        finalist.append(lis)
    
    with open("dynamic.csv", 'w', newline='') as myfile:
        wr = csv.writer(myfile, quoting=csv.QUOTE_ALL)

        wr.writerow(topics)
        for i in range(len(finalist)):
            wr.writerow(finalist[i])

def main():
    file = sys.argv[1]

    finaldynamicfoo(file)

if __name__ == '__main__':
    main()
